---
// Component for one Pokemon displayed on the homepage.

import { getEntry } from 'astro:content';
import { applyMovesetOverrides, getMoveCounts } from '../pokemon-utils';
import PokemonNamecard from './PokemonNamecard.astro';
import FastMove from './fastMove.astro';
import ChargedMove from './chargedMove.astro';
import MoveCounts from './MoveCounts.astro';
import { LevelIvsSchema, Pokemon, PokemonSpecies } from '../models';
import DamageRange from './DamageRange.astro';

interface Props {
  opponent: PokemonSpecies;
  battler?: Pokemon;
  maxCp: 1500 | 2500 | null;
}

// Move cycles for the opponent's moveset
const pokemon = applyMovesetOverrides(Astro.props.opponent);

const fastMoves = await Promise.all(
  pokemon.fastMoves.map((m) => getEntry('fastMoves', m).then((m) => m.data))
);
const chargedMoves = await Promise.all(
  pokemon.chargedMoves.map((m) =>
    getEntry('chargedMoves', m).then((m) => m.data)
  )
).then((moves) => moves.sort((a, b) => a.energy - b.energy));

// Damage for the PVPoke default IVs
const defaultIvs =
  Astro.props.maxCp != null
    ? pokemon.defaultIvs[Astro.props.maxCp]
    : LevelIvsSchema.parse({
        level: 50,
        ivs: { atk: 15, def: 15, hp: 15 },
      });
const opponentBattler: Pokemon = {
  species: pokemon,
  level: defaultIvs.level,
  ivs: defaultIvs.ivs,
};

const myBattler = Astro.props.battler;
---

<div class="container mb-1 items-center rounded-md bg-neutral p-2">
  <PokemonNamecard pokemon={pokemon} />
  <div
    class="table w-auto border-spacing-x-2 border-spacing-y-1 rounded-md border-2 border-dashed border-warning p-2 text-neutral-500"
  >
    <div class="table-row">
      <div class="table-cell w-36 align-middle text-xs"></div>
      {
        fastMoves.map((fastMove) => (
          <div class="table-cell">
            <FastMove move={fastMove} />
            {myBattler && (
              <DamageRange
                move={fastMove}
                attacker={opponentBattler}
                defender={myBattler}
              />
            )}
          </div>
        ))
      }
    </div>
    {
      chargedMoves.map((chargedMove) => (
        <div class="table-row">
          <>
            <ChargedMove
              move={chargedMove}
              stab={pokemon.types.includes(chargedMove.type)}
            />
            {myBattler && (
              <DamageRange
                move={chargedMove}
                attacker={opponentBattler}
                defender={myBattler}
              />
            )}
          </>
          {fastMoves.map((fast) => (
            <MoveCounts counts={getMoveCounts(fast, chargedMove)} />
          ))}
        </div>
      ))
    }
  </div>
</div>
